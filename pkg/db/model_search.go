// Code generated by mfd-generator v0.4.5; DO NOT EDIT.

//nolint:all
//lint:file-ignore U1000 ignore unused code, it's generated
package db

import (
	"time"

	"github.com/go-pg/pg/v10"
	"github.com/go-pg/pg/v10/orm"
)

const condition = "?.? = ?"

// base filters
type applier func(query *orm.Query) (*orm.Query, error)

type search struct {
	appliers []applier
}

func (s *search) apply(query *orm.Query) {
	for _, applier := range s.appliers {
		query.Apply(applier)
	}
}

func (s *search) where(query *orm.Query, table, field string, value interface{}) {
	query.Where(condition, pg.Ident(table), pg.Ident(field), value)
}

func (s *search) WithApply(a applier) {
	if s.appliers == nil {
		s.appliers = []applier{}
	}
	s.appliers = append(s.appliers, a)
}

func (s *search) With(condition string, params ...interface{}) {
	s.WithApply(func(query *orm.Query) (*orm.Query, error) {
		return query.Where(condition, params...), nil
	})
}

// Searcher is interface for every generated filter
type Searcher interface {
	Apply(query *orm.Query) *orm.Query
	Q() applier

	With(condition string, params ...interface{})
	WithApply(a applier)
}

type UserSearch struct {
	search

	ID            *int
	Nickname      *string
	CreatedAt     *time.Time
	StatusID      *int
	IDs           []int
	NicknameILike *string
}

func (us *UserSearch) Apply(query *orm.Query) *orm.Query {
	if us == nil {
		return query
	}
	if us.ID != nil {
		us.where(query, Tables.User.Alias, Columns.User.ID, us.ID)
	}
	if us.Nickname != nil {
		us.where(query, Tables.User.Alias, Columns.User.Nickname, us.Nickname)
	}
	if us.CreatedAt != nil {
		us.where(query, Tables.User.Alias, Columns.User.CreatedAt, us.CreatedAt)
	}
	if us.StatusID != nil {
		us.where(query, Tables.User.Alias, Columns.User.StatusID, us.StatusID)
	}
	if len(us.IDs) > 0 {
		Filter{Columns.User.ID, us.IDs, SearchTypeArray, false}.Apply(query)
	}
	if us.NicknameILike != nil {
		Filter{Columns.User.Nickname, *us.NicknameILike, SearchTypeILike, false}.Apply(query)
	}

	us.apply(query)

	return query
}

func (us *UserSearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		if us == nil {
			return query, nil
		}
		return us.Apply(query), nil
	}
}

type PlaceSearch struct {
	search

	ID             *int
	PlaceName      *string
	PlacePriority  *int
	UserID         *int
	CreatedAt      *time.Time
	IDs            []int
	PlaceNameILike *string
}

func (ps *PlaceSearch) Apply(query *orm.Query) *orm.Query {
	if ps == nil {
		return query
	}
	if ps.ID != nil {
		ps.where(query, Tables.Place.Alias, Columns.Place.ID, ps.ID)
	}
	if ps.PlaceName != nil {
		ps.where(query, Tables.Place.Alias, Columns.Place.PlaceName, ps.PlaceName)
	}
	if ps.PlacePriority != nil {
		ps.where(query, Tables.Place.Alias, Columns.Place.PlacePriority, ps.PlacePriority)
	}
	if ps.UserID != nil {
		ps.where(query, Tables.Place.Alias, Columns.Place.UserID, ps.UserID)
	}
	if ps.CreatedAt != nil {
		ps.where(query, Tables.Place.Alias, Columns.Place.CreatedAt, ps.CreatedAt)
	}
	if len(ps.IDs) > 0 {
		Filter{Columns.Place.ID, ps.IDs, SearchTypeArray, false}.Apply(query)
	}
	if ps.PlaceNameILike != nil {
		Filter{Columns.Place.PlaceName, *ps.PlaceNameILike, SearchTypeILike, false}.Apply(query)
	}

	ps.apply(query)

	return query
}

func (ps *PlaceSearch) Q() applier {
	return func(query *orm.Query) (*orm.Query, error) {
		if ps == nil {
			return query, nil
		}
		return ps.Apply(query), nil
	}
}
